MVC의 핵심은 클라이언트의 요청을 3가지 역할자가 나누어 처리하는 것입니다. 사용자와의 상호작용은 뷰(View) 컴포너트가 담당하고.
데이터의 처리는 모델(Model) 컴포넌트, 컨트롤러(Controller)는 뷰와 모델을 제어하여 업무 처리를 수행합니다. 이렇게 역할을
나누어 작업을 처리하는 방식은 객체지향 프로그밍의 특징입니다. 가능한 역할을 작은 단위로 나누면 다른 프로젝트에서 재사용할 가능성이 
높아집니다.

기본에 서블릿이 하던 작업 중에서 화면 출력과 관련한 기능을 분리하여 JSP 페이지로 정의하였습니다. 보다 쉽게 HTML 화면을 만들고
클라이언트로 출력하기 위해 등장한 기술이 JSP입니다.

JSP 페이지에는 출력문을 표현하는 템플릿 데이터와 지시지<%@ ... %>, 선언문<%! ... %>, 스크립트릿<% ... %>. 
표현식<%= ... %> 등으로 구성됩니다. JSP 페이지는 그 자체로 실행되지 않고 서블릿을 생성하기 위한 소스로 사용됩니다. JSP 엔진은
JSP 파일을 참고하여 서블릿을 생성합니다. 서블릿 파일을 만들 때 탬플릿 데이터는 자바 출력문으로 바뀌고, 기타 JSP 전용 태그는 특정 자바
코드로 바뀝니다.

JSP 전용  태그 중에서 액션(Action)은 자바 객체를 생성하거나 보관소에서 값을 꺼낼 때 유용합니다. 서블릿 및 JSP에서 제공하는 보관소는
4가지가 있습니다. 보관소의 생명주기에 따라 page, request, session, application으로 표현합니다. page는 JSP 페이지에서만
유효하고, request는 요청에서 응답까지 유효합니다.session은 최초 요청에서 브라우저를 닫을 때까지 유효합니다. 보통 로그인해서
로그아웃할 때까지를 session의 유효범위로 간주합니다. applicaion은 웹 애플리케이션의 시작에서 종료할 떄까지 유효합니다. 객체를
공유할 경우 그 유효범위를 따져서 적절한 보관소를 선택해야 합니다.

EL표기를 사용하면 액션보다 더 쉬운 방법으로 보관소에 저장된 객체에 접근하여 값을 꺼낼 수 있습니다. 여기에 JSTL 확장 태그를 사용하면
JSP페이지에서 자바 코드를 작성하지 않고 대부분의 출력 작업을 처리할 수 있습니다. 이렇게 JSTL과 EL 표기를 사용하여 자바 코드의 작성을
최소화 한다면, 웹 디자이너나 웹 퍼블리셔와 협업하기가 훨씬 쉬워질 것입니다.

모델 컴포넌트를 만들기 위해 서블릿으로부터 데이터 처리 로직을 분리하여 DAO를 정의하였습니다. DAO를 도입하여 얻는 이점은 데이터 처리
부분을 공유함으로써 중복 코드를 줄일 수 있고, 데이터 구조에 변경이 발생하면 그 변경 사항을 적용하기 쉽다는 것입니다. 또한, 다른 프로젝트
에서 재사용하기가 쉽습니다.

웹 애플리케이션이 시작될 때 서블릿이 사용할 객체를 미리 준비하기 위하여 ServletContextListener를 활용하는 방법을 배웠습니다.
서블릿 컨테이너는 웹 애플리케이션의 시작과 종료를 알리기 위해 이벤트를 발생시킵니다. 만약 이런 이벤트에 반응하여 뭔가 작업을 수행하고
싶다면, ServeltContextListener의 구현체를 만들고 web.xml 파일에 등록하면 됩니다.

서블릿들 사이에 값을 공유하기 위해 ServletContext(application) 객체를 활용하는 방법을 배웠습니다. 이 객체는 웹 애플리케이션이
실행되는 동안 공유할 값이 있다면 이 객체에 보관하면 됩니다. 이 장에서는 DAO 객체를 공유하기 위해 ServletContext에 보관하였습니다.

데이터베이스에 질의하기 위해 매번 연결을 한다면 사용자 인증과 연결을 준비하는데 많은 시간을 낭비하게 됩니다. 이를 개선하기 위해 연결
객체를 생성하고 사용한 후, 버리지 않고 보관해 두었다가 다 사용하는 방식을 적용하였습니다. 자주 사용하는 객체들을 보관해 두고 필요할 때
마다 재 사용하는 방식을 '풀링(pooling)'이라고 했습니다. 이 장에서도 DB 커넥션풀(ConnectionPool)을 정의하여 DB커넥션을
재활용하도록 하였습니다.

DAO가 데이터를 처리하기 위해서는 DB 커넥션을 만들어주는 DB 커넥션풀이 필요합니다. 이렇게 어떤 작업을 처리하기 위해 사용하는 객체를
'의존 객체'라 합니다. 의존 객체는 필요할 때 마다 직접 생성할 수 있지만, 실무에서는 주로 단위 테스트나 유지보수를 쉽게 하기 위해 외부에서
주입하는 방식을 사용합니다. 이것을 '의존성 주입(dependency injection)' 이라 부릅니다. 이 장에서는 DAO가 사용하는 DB 커넥션풀
에 대해 의존성 주입을 적용하였습니다.

마지막으로 서버측 애플리케이션을 개발할 때 데이터베이스 접속을 원활히 하기 위해 만든 javax.sql 확장 패키지에 대해 알아보았습니다.
특히 이 패키지에서 제공하는 DataSource는 DB 커넥션풀 기능을 제공하기 때문에 매우 편리합니다. DataSource는 서버에 관리하기 때문에
데이터베이스가 바뀌거나 JDBC 드라이버가 변경되더라도 애플리케이션 쪽에는 영향을 미치지 않습니다. 톰캣 서버에 DataSource를 등록해
놓으면, JNDI 이름으로 이 서버 자원을 찾을 수 있어 개발 편이성이 향샹됩니다.